Simplify Callbacks
Get results from a potentially infinite list - BuildSequence
Get a promise for a future result	- Async/Await
Work with streams of data	- Channels and Pipelines
Act on multiple asynchronous inputs	

Let funtion descriptions
Scrool object
object.let{it.class}

//Also and apply difference

data class Person(var n: String, var t : String)
var person = Person("Anupam", "Kotlin")

person.apply { t = "Swift" }
println(person)

person.also { it.t = "Kotlin" }
println(person)

Introduction
Design patterns can be divided into the three sections:
Creational Design Patterns deliver solutions for creating classes, objects (Singleton, Factory, Builder, etc.)
Structural Design Patterns are about arrangement of classes and objects (e.g. Composite, Facade, Adapter)
Behavioral Design Patterns give us ways to communicate between objects and classes (Command, Observer, Strategy, etc.)

Creational patterns: how you create objects.
Structural patterns: how you compose objects.
Behavioral patterns: how you coordinate object interactions.
https://www.raywenderlich.com/470-common-design-patterns-for-android-with-kotlin
#### How to reduce build time of an android application?
Checkout this awesome article.
What I got from the article was: A few commands we can add to the gradle.properties file:
org.gradle.configureondemand=true - This command will tell gradle to only build the projects that it really needs to build.
Use Daemon — org.gradle.daemon=true - Daemon keeps the instance of the gradle up and running in the background even after your build finishes. This will remove the time required to initialize the gradle and decrease your build timing significantly.
org.gradle.parallel=true - Allow gradle to build your project in parallel. If you have multiple modules in you project, then by enabling this, gradle can run build operations for independent modules parallelly.
Increase Heap Size — org.gradle.jvmargs=-Xmx3072m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 - Since android studio 2.0, gradle uses dex in the process to decrease the build timings for the project. Generally, while building the applications, multiple dx processes runs on different VM instances. But starting from the Android Studio 2.0, all these dx processes runs in the single VM and that VM is also shared with the gradle. This decreases the build time significantly as all the dex process runs on the same VM instances. But this requires larger memory to accommodate all the dex processes and gradle. That means you need to increase the heap size required by the gradle daemon. By default, the heap size for the daemon is about 1GB.
Ensure that dynamic dependency is not used. i.e. do not use
implementation 'com.android.support:appcompat-v7:27.0.+'.
This command means gradle will go online and check for the latest version every time it builds the app.
Instead use fixed versions i.e. 'com.android.support:appcompat-v7:27.0.2'
I followed the steps in there and reduced by build time from 167 seconds to 65 seconds ~ 38%.
