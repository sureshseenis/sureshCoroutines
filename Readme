Simplify Callbacks
Get results from a potentially infinite list - BuildSequence
Get a promise for a future result	- Async/Await
Work with streams of data	- Channels and Pipelines
Act on multiple asynchronous inputs	

Let funtion descriptions
Scrool object
object.let{it.class}

//Also and apply difference

data class Person(var n: String, var t : String)
var person = Person("Anupam", "Kotlin")

person.apply { t = "Swift" }
println(person)

person.also { it.t = "Kotlin" }
println(person)

Introduction
Design patterns can be divided into the three sections:
Creational Design Patterns deliver solutions for creating classes, objects (Singleton, Factory, Builder, etc.)
Structural Design Patterns are about arrangement of classes and objects (e.g. Composite, Facade, Adapter)
Behavioral Design Patterns give us ways to communicate between objects and classes (Command, Observer, Strategy, etc.)

Creational patterns: how you create objects.
Structural patterns: how you compose objects.
Behavioral patterns: how you coordinate object interactions.
